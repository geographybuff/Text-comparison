# -*- coding: utf-8 -*-
"""
Created on Wed Mar 13 15:12:33 2019

@author: Owner
"""


import collections
import scrapy
import numpy as np
import matplotlib.pyplot as plt
from textwrap import wrap

class Wordicts():
    def onedict(self, text):
        onecounter = dict(collections.Counter(str(text).split(" "))) # Dictionary: keys are all the words; values are how frequently they occur. 
        onedict = {k:(v/sum(onecounter.values())) for(k, v) in zip(onecounter.keys(), onecounter.values())}  # Converts the absolute number of occurences to a decimal portion of total two word sequences.
        return onedict
    def twodict(self, text):
        ow = str(text).split(" ")  
        tw = [ow[i] + ow[i+1] for i in range(len(ow)-1)]  # Joins every list item to the next list item, with no spaces. Creates list of all two-word sequences in the text.
        twocounter = dict(collections.Counter(tw))  
        twodict = {k:(v/sum(twocounter.values())) for(k, v) in zip(twocounter.keys(), twocounter.values())} 
        return twodict
    def threedict(self, text):  # Same as the twodict function, but for three word sequences.
        ow = str(text).split(" ")
        thr = [ow[i] + ow[i+1] + ow[i+2] for i in range(len(ow)-2)]
        threecounter = dict(collections.Counter(thr))
        threedict = {k:(v/sum(threecounter.values())) for(k, v) in zip(threecounter.keys(), threecounter.values())}
        return threedict
    def compare(self, text1, text2):
        freqdict1 = {'onedict': self.onedict(text1), 'twodict': self.twodict(text1), 'threedict': self.threedict(text1)}
        freqdict2 = {'onedict': self.onedict(text2), 'twodict': self.twodict(text2), 'threedict': self.threedict(text2)}
        score = []
        for i in ['onedict', 'twodict', 'threedict']:
            intersection = list(set(freqdict1[i].keys()).intersection(set(freqdict2[i].keys())))
            prelimscore = sum([(min(freqdict1[i][j], freqdict2[i][j])) for j in intersection])
            score.append(prelimscore)
        adjusted = 0.1*score[0] + 0.3*score[1] + 0.6*score[2]
        return adjusted

# 32 texts we'll use
n9841 = open('1984Chapter1.txt', 'r').read()  # George Orwell
n9842 = open('1984Chapter2.txt', 'r').read() 
af1 = open('AnimalFarmChapter1.txt', 'r').read()
af2 = open('AnimalFarmChapter2.txt', 'r').read()
hobbit1 = open('TheHobbitChapter1.txt', 'r').read()  # J.R.R. Tolkien
hobbit2 = open('TheHobbitChapter2.txt', 'r').read()
frf = open('TheFellowshipoftheRingForeword.txt', 'r').read()
frp = open('TheFellowshipoftheRingPrologue.txt', 'r').read()
ge1 = open('GreatExpectationsChapter1.txt', 'r').read()  # Charles Dickens
ge2 = open('GreatExpectationsChapter2.txt', 'r').read()
dp1 = open('TheDetectivePolicePart1.txt', 'r').read()
dp2 = open('TheDetectivePolicePart2.txt', 'r').read()
pp12 = open('PrideandPrejudiceChapter1-2.txt', 'r').read()  # Jane Austen
pp3 = open('PrideandPrejudiceChapter3.txt', 'r').read()
ps1 = open('PersuasionChapter1.txt', 'r').read()
ps2 = open('PersuasionChapter2.txt', 'r').read()
hs1 = open('HindSwarajChapter1.txt', 'r').read()  # Mahatma Gandhi
hs24 = open('HindSwarajChapter2-4.txt', 'r').read()
gh13 = open('AGuidetoHealthChapter1-3.txt', 'r').read()
gh45 = open('AGuidetoHealthChapter4-5.txt', 'r').read()
ts1 = open('TomSawyerChapter1.txt', 'r').read()  # Mark Twain
ts2 = open('TomSawyerChapter2.txt', 'r').read()
ava = open('TheAmericanVandalAbroad.txt', 'r').read()
ats = open('AmongtheSpirits.txt', 'r').read()
tl1 = open('ALetterConcerningTolerationPart1.txt', 'r').read()  # John Locke
tl2 = open('ALetterConcerningTolerationPart2.txt', 'r').read()
ed1 = open('SomeThoughtsConcerningEducationPart1.txt', 'r').read()
ed2 = open('SomeThoughtsConcerningEducationPart2.txt', 'r').read()
lv12 = open('LeviathanOfManChapter1-2.txt', 'r').read()  # Thomas Hobbes
lv3 = open('LeviathanOfManChapter3.txt', 'r').read()
law12 = open('TheElementsOfLawChapter1-2.txt', 'r').read()
law3 = open('TheElementsOfLawChapter3.txt', 'r').read()

passages = [n9841, n9842, af1, af2, hobbit1, hobbit2, frf, frp, ge1, ge2, dp1, dp2, pp12, pp3, ps1, ps2, hs1, hs24, gh13, gh45, ts1, ts2, ava, ats, tl1, tl2, ed1, ed2, lv12, lv3, law12, law3]
# They're easier to access when we put them in a list

#comparisonarray = [[Wordicts().compare(i, j) if passages.index(i) < passages.index(j) < len(passages) else 0 for j in passages[1::]] for i in passages[:-1]]

#print(comparisonarray)  

data = np.array([[0.09872637515562711, 0.06899523174307542, 0.07410879356792295, 0.07569847093069837, 0.07374794879764224, 0.061828188784904196, 0.06246142360977851, 0.058029226561959586, 0.07264162065882648, 0.07272125437968296, 0.07484145348851967, 0.050551515744362126, 0.06473908269358959, 0.07194154570498676, 0.06416231159454316, 0.04530480278761758, 0.04908903238768156, 0.06242820062933968, 0.06618883358155003, 0.057795527092743694, 0.05498871482292509, 0.06468965645655649, 0.06707401393392691, 0.06159048963058035, 0.061856739370850844, 0.06266458312237598, 0.06101658607225857, 0.05622307811737514, 0.055256323113972446, 0.047956271310657425, 0.0521324610030299], [0, 0.06595182346562949, 0.06966975718743881, 0.06722094176425476, 0.06327257821880355, 0.057547988344445494, 0.05582007438864393, 0.05618470334214175, 0.06517093772011065, 0.0662420125756536, 0.0674959113396902, 0.05175878218901322, 0.059948822211658585, 0.06676182218509794, 0.06033636316677261, 0.04733335833831072, 0.049066898887189805, 0.06020427332519812, 0.05997973730108471, 0.05573990257219101, 0.05606323554002051, 0.06295374068435063, 0.06242152797319779, 0.056163836292636604, 0.05506410165260492, 0.05841394879329249, 0.05667266013201838, 0.055950912140918053, 0.05239199372375788, 0.04895135881217219, 0.05381280331160957], [0, 0, 0.09296746135750081, 0.07613757280728115, 0.06727920288382973, 0.06284241548338648, 0.059188172298646195, 0.05676795866071557, 0.06579219889004212, 0.06957412303263175, 0.07154443152203835, 0.06224528844653302, 0.06284268815668262, 0.062164588461471326, 0.05959363943778868, 0.062375180047520774, 0.06311055060357502, 0.06639588871112694, 0.0751768403687464, 0.05266681287138314, 0.04995962835294164, 0.06599450105984335, 0.06392406015972828, 0.06636942635314208, 0.06618554349637054, 0.06888905335572883, 0.06932463003350736, 0.06397109460826517, 0.06065366014200603, 0.05576658784531054, 0.05354403114697475], [0, 0, 0, 0.0724669648217661, 0.06944011149710912, 0.06220315360691679, 0.06719690523563543, 0.055286274378146906, 0.06645700108850265, 0.06838841615686492, 0.06878175742345277, 0.0506593873554536, 0.06031376804111788, 0.06577880412810057, 0.05938142778581548, 0.04765016590052849, 0.05537509317507407, 0.06519541459266802, 0.06275150401369267, 0.05142352152741288, 0.05107715566731838, 0.06405196910713748, 0.05950713353622896, 0.05998377007791458, 0.061263717304547376, 0.060666382237360185, 0.062063574183693314, 0.05949953401030995, 0.05545557275618006, 0.05213143399820404, 0.050399862396425237], [0, 0, 0, 0, 0.09843147137427816, 0.05978581015897085, 0.06501010649376485, 0.06517872739813943, 0.07504815855406179, 0.08124504002777005, 0.08188914185906385, 0.05996289169854159, 0.06388871314136464, 0.06421922185818889, 0.0571875992758683, 0.05284248745132245, 0.05729124893416612, 0.06159888916869301, 0.07184952094208064, 0.06085439676806259, 0.056749988695728434, 0.06706870003910768, 0.07198902437862341, 0.06438737160650106, 0.06328815931941215, 0.07100609036567149, 0.07093044259990577, 0.05734376089644676, 0.05599547535017434, 0.047971075648549764, 0.05025939499283008], [0, 0, 0, 0, 0, 0.055026816695531965, 0.061099680488303575, 0.05999757951187262, 0.07096820786560128, 0.0734866268539879, 0.07604527215230433, 0.05423953077152295, 0.061766250833141585, 0.06067845080241882, 0.05577067264725778, 0.044746411106131714, 0.04709126653322851, 0.05367036002439036, 0.060848789171353675, 0.05842816464120961, 0.05324240484014048, 0.05882292829546089, 0.06836608128434936, 0.053449135724670596, 0.054605905518751725, 0.06543136982621522, 0.0637738948372139, 0.051276646820318315, 0.04956800845226149, 0.04295744315356516, 0.04457937475849131], [0, 0, 0, 0, 0, 0, 0.06874186087904513, 0.053554956644362536, 0.05944817924848332, 0.061244088709742676, 0.06155183808680917, 0.05414308916495653, 0.05701758870642923, 0.060314338757249945, 0.05819230598895062, 0.052463797776168476, 0.059081556691861215, 0.061984754581676224, 0.06728930750014342, 0.043824559432511914, 0.04089364001846481, 0.05818871756258064, 0.05861960121787942, 0.06469256589526814, 0.06538624277880643, 0.05953876623339094, 0.059159524399776925, 0.06559787818310076, 0.06288453925814484, 0.05889753573174977, 0.05616086388059536], [0, 0, 0, 0, 0, 0, 0, 0.05176367008373912, 0.05372993708128692, 0.05829600449598817, 0.05684335364207367, 0.04218026798741749, 0.04946778084908883, 0.060413598445785, 0.05410505939840311, 0.04154565221318392, 0.05275872110427191, 0.06630472113718541, 0.06400737364220659, 0.04175373789814275, 0.03829975033338428, 0.06592880239126085, 0.05189730549459357, 0.06596908573102295, 0.06901623083629367, 0.0602181419391181, 0.060968027096094904, 0.06364194476111408, 0.05740069271595167, 0.059299878694781157, 0.051772101162427406], [0, 0, 0, 0, 0, 0, 0, 0, 0.07677750991330907, 0.06862364735753068, 0.0712769724349686, 0.05636420913705613, 0.05925428148066471, 0.058356712365928216, 0.05414932634445464, 0.04998091573091517, 0.04942015371207715, 0.05108877140508952, 0.05384091493723127, 0.05752680164596678, 0.05192525328735183, 0.05791759241784286, 0.06519159111431919, 0.05257776545379885, 0.05030256742266618, 0.05881366587002077, 0.05674213582244578, 0.051061739357679485, 0.05194570854864682, 0.04799971523241062, 0.0487157056564508], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08514824604282069, 0.08450121166920553, 0.06267065462021024, 0.06622239193863631, 0.06377946017586957, 0.06410021441123545, 0.05120337342483908, 0.053835223888468536, 0.05771277440141711, 0.06729707101279662, 0.06436514278985157, 0.05834483005427706, 0.06313286220960306, 0.0706364049730406, 0.059700256533960834, 0.05655694686720088, 0.06571464977136875, 0.06826750579575233, 0.057586961996044794, 0.05259796036693867, 0.04889407211542581, 0.04936290441679765], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1048681071094403, 0.06595407101376112, 0.06501154731895485, 0.06490553991861726, 0.06262886227287416, 0.05765665836957279, 0.059438860466495325, 0.07049885226772902, 0.06992647104220437, 0.0600338213007944, 0.05671030579343818, 0.06920794717925127, 0.07326167156197737, 0.06868253913280338, 0.06628561882131491, 0.07185039206411244, 0.07187983270451076, 0.06227089580248224, 0.06120410398053928, 0.05705862245476656, 0.05473423467730416], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06235581633644403, 0.06846643961249574, 0.06442280897809648, 0.06079270161838846, 0.05369105428937165, 0.05643507958744581, 0.0621565631731328, 0.06696059010744587, 0.0639879437415809, 0.0569407334647642, 0.06757734033041156, 0.0736966845589823, 0.06617473328216542, 0.06405255775381291, 0.06923468284490496, 0.06964010717858003, 0.062226593732790034, 0.059470934889665865, 0.051793994898573364, 0.05502328495265979], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0847147854015449, 0.061835689208362556, 0.0620341086745668, 0.07566558523378374, 0.06438063864390772, 0.05418987624170159, 0.06348392798735013, 0.05315788436613212, 0.045547566295911474, 0.05105669602383715, 0.05746397720990143, 0.06066793939696554, 0.05932962120162649, 0.0687546409796069, 0.0717973606587553, 0.0533387961463275, 0.05790438520967836, 0.051870269460305284, 0.055165667906387224], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08050521356616548, 0.07580279158714834, 0.05473649256983708, 0.050559134849916545, 0.051895849825297644, 0.05560236740998662, 0.05716469649385021, 0.055930005709072694, 0.05616198848611282, 0.068076940368544, 0.05695430755107579, 0.055411728010340625, 0.06209003341462052, 0.060160014550059496, 0.05201628622671927, 0.05476284957756944, 0.04582267172510102, 0.04853034011496464], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09727629222063153, 0.045887608692699866, 0.0509925177760287, 0.05770565145800592, 0.06209330981968865, 0.05271136199231973, 0.050813493668836994, 0.05853607532667796, 0.0644952040129144, 0.06365818879056509, 0.06265995545240777, 0.06459415958728029, 0.0644566576897285, 0.058598903404441134, 0.059295613043976056, 0.0541728532611135, 0.05132368109014942], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054878585461784375, 0.052901407096483555, 0.05899118072638327, 0.06358658280285606, 0.05084296693320655, 0.05011228295822739, 0.054331600755670076, 0.06115439266318404, 0.06430437268097708, 0.0650067612782119, 0.06926634117758361, 0.06914635730209232, 0.057774945437073615, 0.05877463588082497, 0.05186445208036546, 0.052885054015889214], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09607415981648529, 0.06838351217070329, 0.07467576700879544, 0.04510101999357188, 0.04363373296136036, 0.05238208154684117, 0.04953471414290149, 0.06655787785848596, 0.06606265975646979, 0.06372490252153222, 0.06806027832803108, 0.05529030161067788, 0.05617152030738098, 0.0545019300732353, 0.05450698001760947], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0753219923237716, 0.08233449130879172, 0.04495937004225369, 0.040453164994129626, 0.0544551860683554, 0.05547685931529765, 0.07529736530263288, 0.07746893640518114, 0.06895215108637615, 0.07414442617030702, 0.06747158996561703, 0.07111080390695185, 0.06994799891722779, 0.06472317727752228], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.12488719656598013, 0.04292292246179496, 0.04249301314818911, 0.06511484729886151, 0.054218732230855465, 0.08463884719781338, 0.08509569190465403, 0.08093174783930665, 0.0791936871373614, 0.08063771572012202, 0.07361459892523495, 0.0781574733327818, 0.07179207532269996], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0445109354105677, 0.04539100607018387, 0.06606707728704414, 0.05748470386564629, 0.09526729407896652, 0.09649847195433248, 0.09117802954799151, 0.09507182319951642, 0.07855216633246932, 0.07700443636596158, 0.07352604114394375, 0.06877221344633314], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.060211416324871515, 0.05246941550727754, 0.060269501307017005, 0.04402469976990679, 0.043154449644155345, 0.052970078100161244, 0.05032485514169442, 0.043263266032352005, 0.043631817249569924, 0.03716401180023246, 0.03980503722324193], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04724655697080605, 0.05575725102996214, 0.04257769318724683, 0.04046991218684274, 0.0484115535018207, 0.04719405020007528, 0.03991152362700741, 0.04340329601448389, 0.03547976849065909, 0.038657146899123127], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06241394874433664, 0.0629055537026425, 0.06129397090790184, 0.060797152612176275, 0.05961415573901786, 0.06376262361939068, 0.06058161506523626, 0.056325335241268516, 0.054372412204970036], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05618444445413787, 0.0546609603776662, 0.0655580954686984, 0.061204252489186234, 0.05594937773368384, 0.05700976465843899, 0.051193110059110994, 0.04911503809859473], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.18236340945669385, 0.09669902452272869, 0.10267108628147978, 0.08677020051463881, 0.08387971681522835, 0.08414289847603164, 0.07078189730071233], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09694241155924109, 0.10586276182715831, 0.09102122358930241, 0.08422402218238556, 0.08594846371378925, 0.07419871155059982], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.13339782705751657, 0.07911132916612731, 0.07512140054952615, 0.07124265060517872, 0.06759319210370722], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08079867833874838, 0.07401071983731951, 0.06858234859358853, 0.06747775215443577], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.10474559798107166, 0.10972284262789572, 0.1126271631431948], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09115473830167761, 0.09269980587768602], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.10599053397477116]])
data = data*100  # Express in percentages instead of decimal
# x and y labels have different starting and ending points in a correlogram.
xlabels = ['1984-2', 'Hobbit 1', 'Hobbit 2', 'Great Expectations 1', 'Great Expectations 2', 'Pride and Prejudice 1-2', 'Pride and Prejudice 3', 'Hind Swaraj 1', 'Hind Swaraj 2-4', 'Tom Sawyer 1', 'Tom Sawyer 2']
ylabels = ['1984-1', '1984-2', 'Hobbit 1', 'Hobbit 2', 'Great Expectations 1', 'Great Expectations 2', 'Pride and Prejudice 1-2', 'Pride and Prejudice 3', 'Hind Swaraj 1', 'Hind Swaraj 2-4', 'Tom Sawyer 1']
mask = np.tri(data.shape[0], k=-1)  # Covers up the entire left side of the graph with white boxes.
data = np.ma.masked_where(mask, data)


fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 30.67
fig_size[1] = 20.02
fig, ax = plt.subplots()  # Subplot container treats the correlogram and the colorbar key as separate subplots.
im = ax.pcolor(data, cmap='seismic', vmin=2, vmax=10, edgecolors='black')  # Correlogram
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=True)  # The next six lines set and place the x and y tick labels.
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=True)
ax.yaxis.tick_right()
ax.xaxis.tick_top()
ax.set_xticklabels(xlabels, minor=True, rotation=90)
ax.set_yticklabels(ylabels, minor=True, rotation=0)
xlabel = 'Comparison Score: 10% shared words, 30% shared two word sequences, 60% shared three word sequences'
xlabelwrap = '\n'.join(wrap(xlabel, 60))  # Line breaks for formatting
ax.set_xlabel(xlabelwrap)



for y in range(data.shape[0]):  # Place the numbers in the middle of the squares
    for x in range(data.shape[1]):
        if data[y,x]>0:  
          plt.text(x + 0.5, y + 0.5, '%.2f' % data[y, x],
                  horizontalalignment='center',
                  verticalalignment='center',
                  )
cbar = fig.colorbar(im, fraction=0.046, pad=0.08, orientation='horizontal')  # Set the location of the colorbar
cbar.set_ticks(range(11)) # Integer colorbar tick locations
ax.set(frame_on=False, aspect=1, xticks=[], yticks=[])
ax.invert_yaxis()  # Default puts the right angle of the triangle in the lower right. This moves the right angle to the upper right.


plt.show()
  